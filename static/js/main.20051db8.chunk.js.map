{"version":3,"sources":["assets/icons.svg","components/Header/Header.js","components/Icon/Icon.js","components/MainMenuItem/MainMenuItem.js","containers/Main/Main.js","components/Footer/Footer.js","context/victory-context.js","containers/MemoryGame/Card/Card.js","containers/MemoryGame/MemoryMain/MemoryMain.js","components/Modal/Modal.js","containers/TicTacGame/TicTacTile/TicTacTile.js","containers/TicTacGame/TicTacMain/TicTacMain.js","containers/SnakeGame/SnakeFood/SnakeFood.js","containers/SnakeGame/Snake/Snake.js","containers/SnakeGame/SnakeGameMain/SnakeGameMain.js","components/AuthorsMain/AuthorsMain.js","containers/App.js","index.js"],"names":["module","exports","Header","className","to","Icon","props","xmlnsXlink","xmlns","icon","color","size","rotate","xlinkHref","icons","MainMenuItem","title","Main","Footer","VictoryContext","React","createContext","showModal","setShowModal","victoryData","getVictoryData","VictoryContextProvider","useState","name","setVictoryData","showModalHandler","useCallback","boolean","dataObj","Provider","value","children","Card","isActive","setIsActive","useEffect","shouldHide","guessedCards","some","el","shouldReset","onClick","disabled","prev","getCardInfo","style","animationName","animation","backgroundColor","initialState","colorsArr","shuffledArr","picksArr","startTimer","timer","counter","victory","memoryReducer","prevState","action","type","array","cardInfo","setVictory","Error","MemoryMain","useReducer","memoryState","dispatch","useContext","colorsMerged","shuffleArray","timer2","undefined","setInterval","clearInterval","length","steps","time","setTimeout","i","j","Math","floor","random","map","index","key","pickedCards","Modal","closeModal","Fragment","player","score","renderMessage","TicTacTile","setIsAcive","turn","setTurn","reset","currentTurn","onClickTile","id","TicTacMain","xArr","setXArr","oArr","setOArr","setShouldReset","firstPlayerName","setFirstPlayerName","secondPlayerName","setSecondPlayerName","checkIfVictory","arr","forEach","includes","onClickHandler","onChange","e","target","SnakeFood","top","left","Snake","body","foodPosition","direction","headPosition","snakeBody","levelNames","levelValue","start","finished","mobileControlsSide","snakeReducer","levelChange","side","SnakeGameMain","snakeState","getRandomNumber","number1","number2","onKeyDownHandler","code","checkIfHit","snakeBodyElements","unshift","pop","interval","level","document","addEventListener","removeEventListener","timeOut","clearTimeout","setLevelHandler","Number","onMobileControlsHandlng","onMobileControlsSideHandler","right","AuthorsMain","href","App","path","component","exact","app","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.20051db8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icons.a43f46f0.svg\";","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport './Header.scss';\r\n\r\nconst Header = () => {\r\n    return (\r\n            <div className='Header'>\r\n                <h1 className='Header-h1'>\r\n                    <NavLink to='/' className='link Header-link'>\r\n                        Games Project\r\n                    </NavLink>\r\n                </h1>\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nimport './Icon.scss';\r\nimport icons from '../../assets/icons.svg';\r\n\r\nconst Icon = props => {\r\n    \r\n    return (\r\n        <svg \r\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            className={`icon-${props.icon} ${props.color ? props.color : null} ${props.size} ${props.rotate ? props.rotate : null}`}\r\n        >\r\n            <use xlinkHref={`${icons}#${props.icon}`} />\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Icon;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport './MainMenuItem.scss';\r\nimport Icon from '../Icon/Icon';\r\nconst MainMenuItem = props => {\r\n    return (\r\n        <NavLink to={`${props.to}`} className='MainMenuItem'>\r\n            <div className='MainMenuItem-IconDiv'>\r\n                <Icon icon={props.icon} size='medium' />\r\n            </div>\r\n            <div className='MainMenuItem-TitleDiv'>\r\n                <h2 className='MainMenuItem-h2'>{props.title}</h2>\r\n            </div>\r\n        </NavLink>\r\n    );\r\n}\r\n\r\nexport default MainMenuItem;","import React from 'react';\r\n\r\nimport MainMenuItem from '../../components/MainMenuItem/MainMenuItem';\r\nimport './Main.scss';\r\n\r\nconst Main = props => {\r\n    return (\r\n        <div className='Main'>\r\n            <MainMenuItem icon='snake' title='Snake Game' to='/SnakeGame' />\r\n            <MainMenuItem icon='card' title='Memory Game' to='/MemoryGame' />\r\n            <MainMenuItem icon='tic-tac-toe' title='Tic Tac Game' to='/TicTacGame' />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Footer.scss';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div className='Footer'>\r\n            <Link to='/SVGAuthors' className='link SvgAuthorsLink'>SVG Authors</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React, { useState, useCallback } from 'react';\r\n\r\nexport const VictoryContext = React.createContext({\r\n    showModal: false,\r\n    setShowModal: () => {},\r\n    victoryData: {},\r\n    getVictoryData: () => {}\r\n});\r\n\r\nconst VictoryContextProvider = props => {\r\n\r\n    const [ showModal, setShowModal ] = useState(false);\r\n    const [ victoryData, setVictoryData ] = useState({ name: '' });\r\n\r\n    const showModalHandler = useCallback(boolean => {\r\n        setShowModal(boolean);\r\n    }, [])\r\n\r\n    const getVictoryData = useCallback(dataObj => {\r\n        setVictoryData(dataObj)\r\n    }, [])\r\n    return (\r\n        <VictoryContext.Provider value={{ setShowModal: showModalHandler, showModal: showModal, victoryData: victoryData, getVictoryData: getVictoryData }}>\r\n            {props.children}\r\n        </VictoryContext.Provider>\r\n    );\r\n}\r\n\r\nexport default VictoryContextProvider;","import React, { useState, useEffect } from 'react';\r\n\r\nimport './Card.scss';\r\n//import Icon from '../../../components/Icon/Icon';\r\n\r\nconst Card = props => {\r\n    const [isActive, setIsActive] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if(props.shouldHide && !props.guessedCards.some(el => el === props.color)) {\r\n            setIsActive(false);\r\n        } else if(props.shouldReset) {\r\n            setIsActive(false);\r\n        }\r\n    }, [props.shouldHide, props.guessedCards, props.color, props.shouldReset]);\r\n\r\n    \r\n\r\n    const onClickHandler = () => {\r\n        if(!props.disabled && !isActive) {\r\n            setIsActive(prev => !prev);\r\n            if(!isActive) {\r\n                props.getCardInfo(props.color);\r\n            }\r\n        } else {\r\n            //console.log('Nie można kliknąć')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div onClick={onClickHandler} className={`card ${isActive ? 'card-active' : ''}`} style={{animationName: props.animation}} >\r\n            <div className='card-front'></div>\r\n            <div className='card-back' style={{backgroundColor: props.color}}></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React, { useEffect, useContext, useReducer } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport { VictoryContext } from '../../../context/victory-context';\r\nimport './MemoryMain.scss';\r\nimport Card from '../Card/Card';\r\n\r\nconst initialState = {\r\n    colorsArr: ['red', 'green', 'yellow', 'purple', 'orange', 'black', 'grey', 'blue'],\r\n    shuffledArr: [],\r\n    picksArr: [],\r\n    guessedCards: [],\r\n    shouldHide: false,\r\n    disabled: false,\r\n    startTimer: false,\r\n    timer: 0,\r\n    shouldReset: false,\r\n    counter: 0,\r\n    victory: false\r\n};\r\n\r\nconst memoryReducer = (prevState, action) => {\r\n    switch(action.type) {\r\n        case 'SHUFFLE_ARR':\r\n            return {\r\n                ...prevState,\r\n                shuffledArr: action.array\r\n            }\r\n        case 'UPDATE_PICKS_ARR':\r\n            return {\r\n                ...prevState,\r\n                picksArr: [...prevState.picksArr, action.cardInfo]\r\n            }\r\n        case 'RESET_PICKS_ARR':\r\n            return {\r\n                ...prevState,\r\n                picksArr: []\r\n            }\r\n        case 'UPDATE_GUESSED_ARR':\r\n            return {\r\n                ...prevState,\r\n                guessedCards: [...prevState.guessedCards, action.cardInfo]\r\n            }\r\n        case 'SET_SHOULD_HIDE': \r\n            return {\r\n                ...prevState,\r\n                shouldHide: action.shouldHide\r\n            }\r\n        case 'SET_DISABLED':\r\n            return {\r\n                ...prevState,\r\n                disabled: action.disabled\r\n            }\r\n        case 'START_TIMER':\r\n            return {\r\n                ...prevState,\r\n                startTimer: action.startTimer\r\n            }\r\n        case 'SET_TIMER':\r\n            return {\r\n                ...prevState,\r\n                timer: prevState.timer + 1\r\n            }\r\n        case 'SET_RESET':\r\n            return {\r\n                ...prevState,\r\n                shuffledArr: [],\r\n                picksArr: [],\r\n                guessedCards: [],\r\n                shouldHide: false,\r\n                disabled: false,\r\n                startTimer: false,\r\n                timer: 0,\r\n                shouldReset: true,\r\n                counter: 0,\r\n                victory: false\r\n            }\r\n        case 'SET_SHOULD_RESET':\r\n            return {\r\n                ...prevState,\r\n                shouldReset: action.shouldReset\r\n            }\r\n        case 'SET_COUNTER':\r\n            return {\r\n                ...prevState,\r\n                counter: prevState.counter + 1\r\n            }\r\n        case 'SET_VICTORY':\r\n            return {\r\n                ...prevState,\r\n                victory: action.setVictory\r\n            }\r\n        case 'RESET_COUNTER':\r\n            return {\r\n                ...prevState,\r\n                counter: 0\r\n            }\r\n        case 'RESET_TIMER':\r\n            return {\r\n                ...prevState,\r\n                timer: 0\r\n            }\r\n        default:\r\n            throw new Error('Should never get there!');\r\n    }   \r\n}\r\n\r\nconst MemoryMain = props => {\r\n\r\n    const [ memoryState, dispatch ] = useReducer(memoryReducer, initialState);\r\n\r\n\r\n    const { getVictoryData, setShowModal } = useContext(VictoryContext);\r\n\r\n    useEffect(() => {\r\n        const colorsMerged = [...memoryState.colorsArr, ...memoryState.colorsArr];\r\n        shuffleArray(colorsMerged);\r\n        dispatch({ type: 'SET_SHOULD_RESET',  shouldReset: false});\r\n    }, [memoryState.colorsArr, memoryState.shouldReset]);\r\n\r\n    useEffect(() => {\r\n        let timer2 = undefined;\r\n        if(memoryState.startTimer) {\r\n            timer2 = setInterval(() => {\r\n                dispatch({ type: 'SET_TIMER' });\r\n            }, 1000);\r\n        }\r\n\r\n        return () => clearInterval(timer2);\r\n    }, [memoryState.startTimer]);\r\n\r\n    useEffect(() => {\r\n        if(memoryState.picksArr.length === 2) {\r\n            dispatch({ type: 'SET_COUNTER' });\r\n        }\r\n    }, [memoryState.picksArr]);\r\n\r\n    useEffect(() => {\r\n        if(memoryState.guessedCards.length === memoryState.colorsArr.length) {\r\n            dispatch({ type: 'START_TIMER', startTimer: false });\r\n            dispatch({ type: 'SET_VICTORY', setVictory: true });\r\n        };\r\n    }, [memoryState.guessedCards, memoryState.colorsArr])\r\n\r\n    useEffect(() => {\r\n        if(memoryState.victory) {\r\n            getVictoryData({ name: 'Memory Game', steps: memoryState.counter, time: memoryState.timer});\r\n            setTimeout(() => {\r\n                setShowModal(true);\r\n            }, 500);\r\n        }\r\n        return () => {}\r\n    }, [memoryState.victory, memoryState.timer, memoryState.counter, getVictoryData, setShowModal])\r\n\r\n    const getCardInfo = cardInfo => {\r\n        if(!memoryState.startTimer) {\r\n            dispatch({ type: 'START_TIMER', startTimer: true });\r\n        }\r\n        if(memoryState.picksArr.length < 2) {\r\n            dispatch({ type: 'UPDATE_PICKS_ARR', cardInfo: cardInfo });\r\n            if(memoryState.picksArr[0] === cardInfo) {\r\n                dispatch({ type: 'UPDATE_GUESSED_ARR', cardInfo: cardInfo });\r\n                dispatch({ type: 'SET_DISABLED', disabled: true });\r\n                setTimeout(() => {\r\n                    dispatch({ type: 'SET_SHOULD_HIDE', shouldHide: true });\r\n                    dispatch({ type: 'SET_DISABLED', disabled: false });\r\n                }, 800);\r\n            } else {\r\n                if(memoryState.picksArr.length > 0) {\r\n                    dispatch({ type: 'SET_DISABLED', disabled: true });\r\n                    setTimeout(() => {\r\n                        dispatch({ type: 'SET_SHOULD_HIDE', shouldHide: true });\r\n                        dispatch({ type: 'SET_DISABLED', disabled: false });\r\n                    }, 800);\r\n                }\r\n            }\r\n\r\n        } else if(memoryState.picksArr.length === 2) {\r\n            dispatch({ type: 'SET_SHOULD_HIDE', shouldHide: false });\r\n            dispatch({ type: 'RESET_PICKS_ARR' });\r\n            dispatch({ type: 'UPDATE_PICKS_ARR', cardInfo: cardInfo });\r\n        }\r\n    }\r\n\r\n    const shuffleArray = array => {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n        dispatch({ type: 'SHUFFLE_ARR', array: array });\r\n    }\r\n\r\n    const resetGame = () => {\r\n        dispatch({ type: 'SET_RESET' });\r\n    }\r\n\r\n    const renderCards = () => {\r\n        return memoryState.shuffledArr.map((el, index) => {\r\n            let animation = '';\r\n            if(index === 1 || index === 5 || index === 9 || index === 13) {\r\n                animation = 'secondCard';\r\n            } else if(index === 2 || index === 6 || index === 10 || index === 14) {\r\n                animation = 'thirdCard';\r\n            } else if (index === 3 || index === 7 || index === 11 || index === 15) {\r\n                animation = 'lastCard'\r\n            }\r\n            return <Card key={index} color={el} animation={animation} getCardInfo={getCardInfo} pickedCards={memoryState.picksArr} shouldHide={memoryState.shouldHide} disabled={memoryState.disabled} guessedCards={memoryState.guessedCards} shouldReset={memoryState.shouldReset} />\r\n        });\r\n    };\r\n    return (\r\n        <div className='MemoryMain'>\r\n            <div className='MemoryMain-container'>\r\n                <div className='MemoryMain-controls'>\r\n                    <NavLink className='link button' to='/'>Main Menu</NavLink>\r\n                    <button onClick={resetGame} className='button'>Reset</button>\r\n                    <div>\r\n                        <p className='MemoryMain-text'>Steps: {memoryState.counter}</p>\r\n                    </div>\r\n                    <div>\r\n                        <p className='MemoryMain-text'>Time: {memoryState.timer}</p>\r\n                    </div>\r\n                </div>\r\n                <div className='MemoryMain-grid'>\r\n                    {renderCards()}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MemoryMain;\r\n\r\n/* \r\n<Icon icon='back-arrow' size='small' />\r\n                        <div>\r\n                            {<Icon icon='refresh' size='small' />}\r\n                            {<p>Reset</p>}\r\n                        </div> */\r\n\r\n\r\n    /* const [colorsArr] = useState(['red', 'green', 'yellow', 'purple', 'orange', 'black', 'grey', 'blue']);\r\n    const [shuffledArr, setShuffledArr] = useState([]);\r\n    const [picksArr, setPicksArr] = useState([]);\r\n    const [guessedCards, setGuessedCards] = useState([]);\r\n    const [shouldHide, setShouldHide] = useState(false);\r\n    const [disabled, setDisabled] = useState(false);\r\n    const [startTimer, setStartTimer] = useState(false);\r\n    const [timer, setTimer] = useState(0);\r\n    const [shouldReset, setShouldReset] = useState(false);\r\n    const [counter, setCounter] = useState(0);\r\n    const [victory, setVictory] = useState(false); */","import React, { useContext } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport { VictoryContext } from '../../context/victory-context';\r\nimport './Modal.scss';\r\n\r\nconst Modal = props => {\r\n\r\n    const { showModal, setShowModal, victoryData } = useContext(VictoryContext);\r\n\r\n    const renderMessage = () => {\r\n        if(victoryData) {\r\n            if(victoryData.name === 'Memory Game') {\r\n                return (\r\n                    <React.Fragment>\r\n                        <p className='Modal-message_p'>You finished {victoryData.name} in {victoryData.steps} steps and {victoryData.time} seconds!</p>\r\n                    </React.Fragment>\r\n                );\r\n            } else if(victoryData.name === 'TicTac Game') {\r\n                return (\r\n                    <React.Fragment>\r\n                        <p className='Modal-message_p'>{victoryData.player} won!</p>\r\n                    </React.Fragment>\r\n                );\r\n            } else if(victoryData.name === 'Snake Game') {\r\n                return (\r\n                    <React.Fragment>\r\n                        <p className='Modal-message_p'>You collected {victoryData.score} points!</p>\r\n                    </React.Fragment>\r\n                );\r\n            } else {\r\n                return (\r\n                    <React.Fragment>\r\n                        <p className='Modal-message_p'>Lorem ipsum</p>\r\n                    </React.Fragment>\r\n                );\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    const closeModal = () => {\r\n        setShowModal(false);\r\n    }\r\n\r\n    return (\r\n        <div className={`Modal ${showModal ? 'Modal-active' : ''}`}>\r\n            <div className='Modal-backdrop' onClick={closeModal}></div>\r\n            <div className='Modal-body'>\r\n                <div className='Modal-titleDiv'>\r\n                    <h1 className='Modal-h1'>{victoryData.name === 'Snake Game' ? 'Crushed!' : 'Victory!'}</h1>\r\n                </div>\r\n                <div className='Modal-message'>\r\n                    {renderMessage()}\r\n                    <div className='Modal-controls'>\r\n                        <NavLink className='button Modal-link' to='/' onClick={closeModal}>Main Menu</NavLink>\r\n                        <button className='button' onClick={closeModal}>Close</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Modal;","import React, { useState, useEffect } from 'react';\r\n\r\nimport './TicTacTile.scss';\r\n\r\nconst TicTacTile = props => {\r\n    const [isActive, setIsAcive] = useState(false);\r\n    const [turn, setTurn] = useState('');\r\n    const { reset } = props;\r\n\r\n    const onClickHandler = () => {\r\n        if(!isActive && !props.victory) {\r\n            setIsAcive(true);\r\n            setTurn(props.currentTurn);\r\n            props.onClickTile(props.id);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(reset) {\r\n            setIsAcive(false);\r\n        }\r\n    }, [reset])\r\n\r\n\r\n    return (\r\n        <div onClick={onClickHandler} className='TicTacTile'>\r\n            <p className='TicTacTile-p'>\r\n                {isActive ? turn : ''}\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TicTacTile;","import React, { useState, useEffect, useCallback, useContext } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport './TicTacMain.scss';\r\nimport TicTacTile from '../TicTacTile/TicTacTile';\r\nimport { VictoryContext } from '../../../context/victory-context';\r\n\r\nconst TicTacMain = props => {\r\n\r\n    const { getVictoryData, setShowModal } = useContext(VictoryContext);\r\n\r\n    const [turn, setTurn] = useState('X');\r\n    const [xArr, setXArr] = useState([]);\r\n    const [oArr, setOArr] = useState([]);\r\n    const [victory, setVictory] = useState(false);\r\n    const [shouldReset, setShouldReset] = useState(false);\r\n    const [firstPlayerName, setFirstPlayerName] = useState('Player 1');\r\n    const [secondPlayerName, setSecondPlayerName] = useState('Player 2');\r\n    //const [winner, setWinner] = useState('');\r\n\r\n    \r\n    \r\n    const checkIfVictory = useCallback(arr => {\r\n        const correctConfiguration = [\r\n            [0, 1, 2],\r\n            [3, 4, 5],\r\n            [6, 7, 8],\r\n            [0, 3, 6],\r\n            [1, 4, 7],\r\n            [2, 5, 8],\r\n            [0, 4 ,8],\r\n            [2, 4 ,6]\r\n        ];\r\n\r\n        correctConfiguration.forEach(el => {\r\n            if(arr.includes(el[0]) && arr.includes(el[1]) && arr.includes(el[2])) {\r\n                setVictory(true);\r\n                if(turn === 'X') {\r\n                    getVictoryData({ name: 'TicTac Game', player: secondPlayerName});\r\n                } else {\r\n                    getVictoryData({ name: 'TicTac Game', player: firstPlayerName});\r\n                }\r\n                setShowModal(true);\r\n            }\r\n        });\r\n    }, [turn, getVictoryData, setShowModal, firstPlayerName, secondPlayerName])\r\n\r\n    useEffect(() => {\r\n        if(!victory) {\r\n            checkIfVictory(xArr);\r\n            checkIfVictory(oArr);\r\n        }\r\n        return () => {}\r\n    }, [checkIfVictory, xArr, oArr, victory]);\r\n\r\n    useEffect(() => {\r\n        if(shouldReset) {\r\n            setShouldReset(false);\r\n            setTurn('X');\r\n            setXArr([]);\r\n            setOArr([]);\r\n            setVictory(false);\r\n        }\r\n    }, [shouldReset])\r\n\r\n    const onClickHandler = id => {\r\n        if(!victory) {\r\n            if(turn === 'X') {\r\n                setXArr(prev => [...prev, id]);\r\n                setTurn('O');\r\n            } else {\r\n                setOArr(prev => [...prev, id]);\r\n                setTurn('X');\r\n            }\r\n        }\r\n    }\r\n\r\n    const renderGrid = () => {\r\n        const arr = [0, 1, 2, 3, 4, 5, 6, 7, 8];\r\n        return arr.map(el => <TicTacTile reset={shouldReset} victory={victory} id={el} onClickTile={onClickHandler} currentTurn={turn} key={el} />)\r\n    }\r\n\r\n    return (\r\n        <div className='TicTacMain'>\r\n            <div className='TicTacMain-container'>\r\n                <div className='TicTacMain-controls'>\r\n                    <div className='Player1'>\r\n                        <input className={`TicTacMain-input ${turn === 'X' ? 'TicTacMain-input--active' : ''}`} value={firstPlayerName} onChange={e => setFirstPlayerName(e.target.value)} />\r\n                    </div>\r\n                    <NavLink to='/' className='button link MainMenuButton'>Main Menu</NavLink>\r\n                    <button className='button ResetButton' onClick={() => setShouldReset(true)}>Reset</button>\r\n                    <div className='Player2'>\r\n                        <input className={`TicTacMain-input ${turn === 'O' ? 'TicTacMain-input--active' : ''}`} value={secondPlayerName} onChange={e => setSecondPlayerName(e.target.value)} />\r\n                    </div>\r\n                </div>\r\n                <div className='TicTacMain-grid'>\r\n                    {renderGrid()}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TicTacMain;","import React from 'react';\r\n\r\nimport './SnakeFood.scss';\r\n\r\nconst SnakeFood = props => {\r\n    return <div className='SnakeFood' style={{top: `${props.top}%`, left: `${props.left}%`}}></div>\r\n}\r\n\r\nexport default SnakeFood;","import React from 'react';\r\n\r\nimport './Snake.scss';\r\n\r\nconst Snake = props => {\r\n    //const { top, left, body } = props;\r\n    //console.log(props.body[0][0]);\r\n    const renderBody = () => {\r\n        return props.body.map((el, index) => {\r\n            return <div className='Snake' key={index} style={{top: `${el[0]}%`, left: `${el[1]}%`}}></div>\r\n        });\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <div className='Snake' style={{top: `${props.top}%`, left: `${props.left}%`}}></div>\r\n            {/* <div className='Snake' style={{top: `${props.body[0][0]}%`, left: `${props.body[0][1]}%`}}></div> */}\r\n            {renderBody()}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Snake;","import React, { useEffect, /* useState, */ useReducer, useCallback, useContext/* , useRef */ } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport './SnakeGameMain.scss';\r\nimport SnakeFood from '../SnakeFood/SnakeFood';\r\nimport Snake from '../Snake/Snake';\r\nimport { VictoryContext } from '../../../context/victory-context';\r\nimport Icon from '../../../components/Icon/Icon';\r\n\r\nconst initialState = {\r\n    foodPosition: [],\r\n    direction: 'RIGHT',\r\n    headPosition: [0, 2],\r\n    snakeBody: [\r\n        [0, 0]\r\n    ],\r\n    score: 0,\r\n    levelNames: ['Slow', 'Medium', 'Fast'],\r\n    levelValue: 1,\r\n    start: false,\r\n    finished: false,\r\n    mobileControlsSide: 'right'\r\n}\r\n\r\nconst snakeReducer = (prevState, action) => {\r\n    switch(action.type) {\r\n        case 'SET_FOOD_POSITION':\r\n            return {\r\n                ...prevState,\r\n                foodPosition: action.foodPosition\r\n            }\r\n        case 'SET_DIRECTION':\r\n            return {\r\n                ...prevState,\r\n                direction: action.direction\r\n            }\r\n        case 'SET_HEAD_POSITION':\r\n            return {\r\n                ...prevState,\r\n                headPosition: action.headPosition\r\n            }\r\n        case 'SET_SNAKE_BODY':\r\n            return {\r\n                ...prevState,\r\n                snakeBody: action.snakeBody\r\n            }\r\n        case 'ADD_BODY_COMPONENT':\r\n            return {\r\n                ...prevState,\r\n                snakeBody: [...prevState.snakeBody, prevState.snakeBody[0]]\r\n            }\r\n        case 'RESET_GAME':\r\n            return {\r\n                ...prevState,\r\n                foodPosition: [],\r\n                direction: 'RIGHT',\r\n                headPosition: [0, 2],\r\n                snakeBody: [\r\n                    [0, 0],\r\n                ],\r\n                score: 0,\r\n                start: false,\r\n                finished: false,\r\n                mobileControlsSide: 'right'\r\n            }\r\n        case 'UPDATE_SCORE':\r\n            return {\r\n                ...prevState,\r\n                score: prevState.score + 1\r\n            }\r\n        case 'SET_LEVEL':\r\n            return {\r\n                ...prevState,\r\n                levelValue: prevState.levelValue + action.levelChange\r\n            }\r\n        case 'START_GAME':\r\n            return {\r\n                ...prevState,\r\n                start: !prevState.start\r\n            }\r\n        case 'FINISH_GAME': {\r\n            return {\r\n                ...prevState,\r\n                finished: true\r\n            }\r\n        }\r\n        case 'CHANGE_MOBILE_SIDE': {\r\n            return {\r\n                ...prevState,\r\n                mobileControlsSide: action.side\r\n            }\r\n        }\r\n        default:\r\n            throw new Error('Should never get there!');\r\n    }\r\n}\r\n\r\nconst SnakeGameMain = props => {\r\n\r\n    //const playArea = useRef();\r\n    const [ snakeState, dispatch ] = useReducer(snakeReducer, initialState);\r\n    const { foodPosition, direction, headPosition, snakeBody, score, levelNames, levelValue, start, mobileControlsSide } = snakeState;\r\n\r\n    const { getVictoryData, setShowModal } = useContext(VictoryContext);\r\n\r\n    const getRandomNumber = useCallback(() => {\r\n        let number1 = 0;\r\n        let number2 = 0;\r\n        const check = () => snakeBody.some(el => el[0] === number1 && el[1] === number2);\r\n        do {\r\n            number1 = Math.floor(Math.random() * 98);\r\n            number2 = Math.floor(Math.random() * 98);\r\n            if(number1 % 2 !== 0) {\r\n                number1 = number1 + 1;\r\n            }\r\n            if(number2 % 2 !== 0) {\r\n                number2 = number2 + 1;\r\n            }\r\n        } while(check());\r\n        \r\n        return [number1, number2]\r\n    }, [snakeBody]);\r\n\r\n    const onKeyDownHandler = e => {\r\n        if(e.code === 'ArrowRight') {\r\n            dispatch({ type: 'SET_DIRECTION', direction: 'RIGHT' });\r\n        } else if(e.code === 'ArrowLeft') {\r\n            dispatch({ type: 'SET_DIRECTION', direction: 'LEFT' });\r\n        } else if(e.code === 'ArrowDown') {\r\n            dispatch({ type: 'SET_DIRECTION', direction: 'DOWN' });\r\n        } else if(e.code === 'ArrowUp') {\r\n            dispatch({ type: 'SET_DIRECTION', direction: 'UP' });\r\n        }\r\n    }\r\n\r\n    const checkIfHit = useCallback(() => {\r\n        return snakeBody.some(el => el[0] === headPosition[0] && el[1] === headPosition[1]);\r\n    }, [snakeBody, headPosition]);\r\n\r\n    useEffect(()=> {\r\n        dispatch({ type: 'RESET_GAME' });\r\n        return () => {}\r\n    }, [])\r\n\r\n    useEffect(() => { //Zbieranie jedzenia i losowanie nowej pozycji jedzienia\r\n        if(foodPosition[0] === headPosition[0] && foodPosition[1] === headPosition[1]) {\r\n            dispatch({ type: 'ADD_BODY_COMPONENT' });\r\n            dispatch({ type: 'UPDATE_SCORE' });\r\n        }\r\n    }, [headPosition, foodPosition]);\r\n\r\n    useEffect(() => { // natychmiastowy ruch głowy w nowym kierunku\r\n        if(headPosition[0] >= 0 && headPosition[0] <= 98 && headPosition[1] >= 0 && headPosition[1] <= 98 && !checkIfHit() && start) {\r\n            \r\n            if(direction === 'RIGHT') {\r\n                dispatch({ type: 'SET_HEAD_POSITION', headPosition: [headPosition[0], headPosition[1] + 2] });\r\n            } else if (direction === 'LEFT') {\r\n                dispatch({ type: 'SET_HEAD_POSITION', headPosition: [headPosition[0], headPosition[1] - 2] });\r\n            } else if (direction === 'UP') {\r\n                dispatch({ type: 'SET_HEAD_POSITION', headPosition: [headPosition[0] - 2, headPosition[1]] });\r\n            } else if(direction === 'DOWN') {\r\n                dispatch({ type: 'SET_HEAD_POSITION', headPosition: [headPosition[0] + 2, headPosition[1]] });\r\n            }\r\n\r\n            const snakeBodyElements = snakeBody;\r\n            snakeBodyElements.unshift([headPosition[0], headPosition[1]]);\r\n            snakeBodyElements.pop();\r\n            dispatch({ type: 'SET_SNAKE_BODY', snakeBody: snakeBodyElements});\r\n        }\r\n        return () => {};\r\n        //only direction added on purpose\r\n        //eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [direction/* , snakeBody, start */]);\r\n\r\n    useEffect(() => { // ruch snake'a w czasie\r\n        let interval = '';\r\n        let level = 0;\r\n        if(levelValue === 0) {\r\n            level = 200;\r\n        } else if (levelValue === 1) {\r\n            level = 100;\r\n        } else {\r\n            level = 50;\r\n        }\r\n        if(headPosition[0] >= 0 && headPosition[0] <= 98 && headPosition[1] >= 0 && headPosition[1] <= 98 && !checkIfHit() && start) {\r\n            interval = setInterval(() => {\r\n                \r\n                if(direction === 'RIGHT') {\r\n                    dispatch({ type: 'SET_HEAD_POSITION', headPosition: [headPosition[0], headPosition[1] + 2] });\r\n                } else if (direction === 'LEFT') {\r\n                    dispatch({ type: 'SET_HEAD_POSITION', headPosition: [headPosition[0], headPosition[1] - 2] });\r\n                } else if (direction === 'UP') {\r\n                    dispatch({ type: 'SET_HEAD_POSITION', headPosition: [headPosition[0] - 2, headPosition[1]] });\r\n                } else {\r\n                    dispatch({ type: 'SET_HEAD_POSITION', headPosition: [headPosition[0] + 2, headPosition[1]] });\r\n                }\r\n\r\n                const snakeBodyElements = snakeBody;\r\n                snakeBodyElements.unshift([headPosition[0], headPosition[1]]);\r\n                snakeBodyElements.pop();\r\n                dispatch({ type: 'SET_SNAKE_BODY', snakeBody: snakeBodyElements});\r\n            }, level);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [headPosition, direction, snakeBody, checkIfHit, levelValue, start]);\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('keydown', onKeyDownHandler);\r\n        return () => document.removeEventListener('keydown', onKeyDownHandler)\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        dispatch({ type: 'SET_FOOD_POSITION', foodPosition: getRandomNumber() })\r\n    }, [getRandomNumber]);\r\n\r\n    useEffect(() => { // Sprawdzenie czy koniec / pokazanie modala\r\n        if(headPosition[0] < 0 || headPosition[0] > 98 || headPosition[1] < 0 || headPosition[1] > 98) {\r\n            getVictoryData({ name: 'Snake Game', score: score });\r\n            setShowModal(true);\r\n        }\r\n        const timeOut = setTimeout(() => {\r\n            if(start && checkIfHit()) {\r\n                getVictoryData({ name: 'Snake Game', score: score });\r\n                setShowModal(true);\r\n            }\r\n        }, 300);\r\n\r\n        return () => clearTimeout(timeOut);\r\n    }, [headPosition, getVictoryData, setShowModal, score, checkIfHit, start]);\r\n\r\n    const setLevelHandler = value => {\r\n        if( (levelValue > 0 && levelValue < 2) || (levelValue === 2 && value === -1) || (levelValue === 0 && value === 1) ) {\r\n            dispatch({ type: 'SET_LEVEL', levelChange: Number(value) });\r\n        }\r\n    }\r\n\r\n    const onResetGame = () => {\r\n        dispatch({ type: 'RESET_GAME' });\r\n    }\r\n\r\n    const onStartGame = () => {\r\n        dispatch({ type: 'START_GAME' });\r\n    }\r\n\r\n    const onMobileControlsHandlng = direction => {\r\n        dispatch({ type: 'SET_DIRECTION', direction: direction });\r\n    }\r\n\r\n    const onMobileControlsSideHandler = () => {\r\n        if(mobileControlsSide === 'right') {\r\n            dispatch({ type: 'CHANGE_MOBILE_SIDE', side: 'left' });\r\n        } else {\r\n            dispatch({ type: 'CHANGE_MOBILE_SIDE', side: 'right' });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='SnakeGameMain'>\r\n            <div className='SnakeGameMain-container'>\r\n                <div className='SnakeGameMain-controls'>\r\n                    <button className='button' onClick={onStartGame}>{start ? 'Pause' : 'Start'}</button>\r\n                    <button className='button' onClick={onResetGame}>Reset</button>\r\n                    <NavLink className='link button' to='/'>Main Menu</NavLink>\r\n                    <div className='SnakeGameMain-levelDiv'>\r\n                        <button className='SnakeGameMain-LevelButton' onClick={() => setLevelHandler(-1)}>-</button>\r\n                        <p className='SnakeGameMain-p'>{levelNames[levelValue]}</p>\r\n                        <button className='SnakeGameMain-LevelButton' onClick={() => setLevelHandler(1)}>+</button>\r\n                    </div>\r\n                    <div className='SnakeGameMain-scoreDiv'>\r\n                        <p className='SnakeGameMain-p'>Score: {score}</p>\r\n                    </div>\r\n                </div>\r\n                <div className='SnakeGameMain-playArea'>\r\n                    <Snake top={headPosition[0]} left={headPosition[1]} body={snakeBody} />\r\n                    <SnakeFood top={foodPosition[0]} left={foodPosition[1]} />\r\n                </div>\r\n                <div className='SnakeGameMain-mobileControlsDiv' style={mobileControlsSide === 'right' ? {right: 0} : {left: 0}} >\r\n                    <div className='SnakeGameMain-mobileControlsGrid'>\r\n                        <button className='SnakeGameMain-mobileButton up' onClick={() => onMobileControlsHandlng('UP')}>\r\n                            <Icon icon='arrow' size='tiny' rotate='deg270' color='white' />\r\n                        </button>\r\n                        <button className='SnakeGameMain-mobileButton left' onClick={() => onMobileControlsHandlng('LEFT')}>\r\n                            <Icon icon='arrow' size='tiny' rotate='deg180' color='white' />\r\n                        </button>\r\n                        <button className='SnakeGameMain-mobileButton right' onClick={() => onMobileControlsHandlng('RIGHT')}>\r\n                            <Icon icon='arrow' size='tiny' color='white' />\r\n                        </button>\r\n                        <button className='SnakeGameMain-mobileButton down' onClick={() => onMobileControlsHandlng('DOWN')}>\r\n                            <Icon icon='arrow' size='tiny' rotate='deg90' color='white' />\r\n                        </button>\r\n                    </div>\r\n                    <button className='SnakeGameMain-mobileToggleButton' onClick={onMobileControlsSideHandler}>Change side</button>\r\n                </div>\r\n                <div className='SnakeGameMain-mobileControlsDivBottom' >\r\n                    <div className='SnakeGameMain-mobileControlsGrid'>\r\n                        <button className='SnakeGameMain-mobileButton up' onClick={() => onMobileControlsHandlng('UP')}>\r\n                            <Icon icon='arrow' size='tiny' rotate='deg270' color='white' />\r\n                        </button>\r\n                        <button className='SnakeGameMain-mobileButton left' onClick={() => onMobileControlsHandlng('LEFT')}>\r\n                            <Icon icon='arrow' size='tiny' rotate='deg180' color='white' />\r\n                        </button>\r\n                        <button className='SnakeGameMain-mobileButton right' onClick={() => onMobileControlsHandlng('RIGHT')}>\r\n                            <Icon icon='arrow' size='tiny' color='white' />\r\n                        </button>\r\n                        <button className='SnakeGameMain-mobileButton down' onClick={() => onMobileControlsHandlng('DOWN')}>\r\n                            <Icon icon='arrow' size='tiny' rotate='deg90' color='white' />\r\n                        </button>\r\n                    </div>\r\n                    <button className='SnakeGameMain-mobileToggleButton' onClick={onMobileControlsSideHandler}>Change side</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SnakeGameMain;","import React from 'react';\r\n\r\nimport './AuthorsMain.scss';\r\nimport Icon from '../Icon/Icon';\r\n\r\nconst AuthorsMain = () => {\r\n    return (\r\n        <div className='AuthorsMain'>\r\n            <div className='AuthorsMain-container'>\r\n                <div className='IconInfo'>\r\n                    <Icon icon='snake' size='medium' />\r\n                    <div className='IconInfo-info'>Icons made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\r\n                </div>\r\n                <div className='IconInfo'>\r\n                    <Icon icon='card' size='medium' />\r\n                    <div className='IconInfo-info'>Icons made by <a href=\"https://www.flaticon.com/authors/ddara\" title=\"dDara\">dDara</a> from <a href=\"https://www.flaticon.com/\"     title=\"Flaticon\">www.flaticon.com</a></div>\r\n                </div>\r\n                <div className='IconInfo'>\r\n                    <Icon icon='tic-tac-toe' size='medium' />\r\n                    <div className='IconInfo-info'>Icons made by <a href=\"https://www.flaticon.com/authors/smalllikeart\" title=\"smalllikeart\">smalllikeart</a> from <a href=\"https://www.flaticon.com/\"     title=\"Flaticon\">www.flaticon.com</a></div>\r\n                </div>\r\n                <div className='IconInfo'>\r\n                    <Icon icon='arrow' size='medium' />\r\n                    <div className='IconInfo-info'>Icons made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\"     title=\"Flaticon\">www.flaticon.com</a></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AuthorsMain;","import React, { /* useState, useCallback */ } from 'react';\r\nimport { Route } from 'react-router-dom';\r\n\r\nimport './App.scss';\r\nimport '../scss/components/_button.scss';\r\nimport '../scss/components/_link.scss';\r\nimport Header from '../components/Header/Header';\r\nimport Main from './Main/Main';\r\nimport Footer from '../components/Footer/Footer';\r\nimport MemoryMain from './MemoryGame/MemoryMain/MemoryMain';\r\nimport Modal from '../components/Modal/Modal';\r\nimport TicTacMain from './TicTacGame/TicTacMain/TicTacMain';\r\nimport SnakeGameMain from './SnakeGame/SnakeGameMain/SnakeGameMain';\r\nimport AuthorsMain from '../components/AuthorsMain/AuthorsMain';\r\n\r\nconst App = () => {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Modal />\r\n      <header>\r\n        <Header />\r\n      </header>\r\n      <main>\r\n        <Route path='/MemoryGame' component={MemoryMain} />\r\n        <Route path='/TicTacGame' component={TicTacMain} />\r\n        <Route path='/SnakeGame' component={SnakeGameMain} />\r\n        <Route path='/SVGAuthors' component={AuthorsMain} />\r\n        <Route path='/' exact component={Main} />\r\n      </main>\r\n      <footer>\r\n        <Footer />\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n/* SVG authors\r\n1. Memory card: <div>Icons made by <a href=\"https://www.flaticon.com/authors/ddara\" title=\"dDara\">dDara</a> from <a href=\"https://www.flaticon.com/\"     title=\"Flaticon\">www.flaticon.com</a></div>\r\n\r\n5. Tic Tac game icon: <div>Icons made by <a href=\"https://www.flaticon.com/authors/smalllikeart\" title=\"smalllikeart\">smalllikeart</a> from <a href=\"https://www.flaticon.com/\"     title=\"Flaticon\">www.flaticon.com</a></div>\r\n6. Snake game icon: <div>Icons made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\"     title=\"Flaticon\">www.flaticon.com</a></div>\r\n7. Arrow: <div>Icons made by <a href=\"https://www.flaticon.com/authors/freepik\" \r\n*/","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './containers/App';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nimport VictoryContextProvider from './context/victory-context';\r\n\r\nconst app = (\r\n    <HashRouter>\r\n        <VictoryContextProvider>\r\n            <App />\r\n        </VictoryContextProvider>\r\n    </HashRouter>\r\n);\r\n\r\nReactDOM.render(app, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}